# Replit AI Agent Prompt: NASA Farm Navigators Game

## Project Overview
Build a 3D educational farming simulation game for the NASA Space Apps Challenge. Players manage a wheat farm using **interactive NASA satellite data tools** (SMAP, MODIS, Flood Pathfinder) to make farming decisions across three critical stages. The game teaches players **how to actually access and interpret real NASA data platforms** while simulating realistic farming scenarios.

---

## Tech Stack Requirements
- **Frontend**: HTML5, CSS3, Vanilla JavaScript
- **3D Engine**: Three.js (CDN: https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js)
- **No Backend**: All logic client-side
- **No localStorage**: Use in-memory state only
- **Responsive**: Desktop and tablet compatible
- **NASA Data Integration**: Embedded iframes and direct links to real NASA tools

---

## File Structure
```
project-root/
├── index.html          # Main HTML container
├── css/
│   └── styles.css      # All styling
├── js/
│   ├── game.js         # Core game state manager
│   ├── scene.js        # Three.js 3D scene setup
│   ├── stage1.js       # Sowing stage logic
│   ├── stage2.js       # Heatwave stage logic
│   ├── stage3.js       # Harvest stage logic
│   ├── formulas.js     # Yield/profit calculations
│   └── ui.js           # UI rendering and interactions
└── assets/
    └── README.md       # Placeholder for future assets
```

---

## Core Game Mechanics

### Game State Object
```javascript
const gameState = {
  // Current game progress
  currentStage: 1,
  // Note: No day counter - stages progress instantly after decisions
  
  // Farm properties
  farmSize: 10, // hectares
  potentialYield: 4000, // kg/ha
  
  // Financial
  budget: 10000, // currency
  waterReserve: 100, // percentage
  
  // Player decisions
  decisions: {
    stage1: null, // 'irrigate' or 'noIrrigate'
    stage2: null, // 'emergencyIrrigation' or 'wait'
    stage3: null  // 'harvestEarly' or 'waitForRipeness'
  },
  
  // NASA data (simulated)
  nasaData: {
    smapAnomaly: -0.3, // Soil moisture (negative = dry)
    modisLST: 2.5,     // Temperature anomaly (°C)
    floodRisk: 0.6,    // Probability 0-1
    ndvi: 0.75         // Vegetation health 0-1
  },
  
  // Yield multipliers
  multipliers: {
    germination: 1.0,
    drought: 1.0,
    heat: 1.0,
    flood: 1.0
  },
  
  // Final outcomes
  finalYieldKg: 0,
  finalYieldBushels: 0,
  profit: 0,
  waterEfficiency: 0,
  resilience: 0
};
```

---

## Game Start: Location Selection & NASA Onboarding

### Welcome Screen (Before Stage 1)
```html
<div id="welcome-screen">
  <h1>🌾 NASA Farm Navigators</h1>
  <p class="subtitle">Learn to use satellite data for smarter farming</p>
  
  <div class="location-setup">
    <h2>📍 Where is your farm located?</h2>
    <p class="help-text">Choose your location to load real regional climate data</p>
    
    <select id="region-select">
      <option value="">-- Select Region --</option>
      <option value="iowa-usa">Iowa, USA (Corn Belt)</option>
      <option value="punjab-india">Punjab, India (Wheat Belt)</option>
      <option value="saopaulo-brazil">São Paulo, Brazil (Soybean Region)</option>
      <option value="kenya-africa">Central Kenya (Smallholder Farm)</option>
      <option value="custom">🌍 Enter Custom Location</option>
    </select>
    
    <div id="custom-location" class="hidden">
      <input type="text" id="location-name" placeholder="e.g., Nebraska, USA">
      <input type="number" id="lat" placeholder="Latitude" step="0.01">
      <input type="number" id="lon" placeholder="Longitude" step="0.01">
    </div>
    
    <button id="confirm-location" disabled>Continue →</button>
  </div>
  
  <div class="nasa-intro">
    <h3>🛰️ You'll use these FREE NASA tools:</h3>
    <div class="tool-cards">
      <div class="tool-card">
        <img src="icon-smap.png" alt="SMAP">
        <h4>SMAP</h4>
        <p>Soil Moisture</p>
      </div>
      <div class="tool-card">
        <img src="icon-modis.png" alt="MODIS">
        <h4>MODIS</h4>
        <p>Temperature & Health</p>
      </div>
      <div class="tool-card">
        <img src="icon-flood.png" alt="Floods">
        <h4>Flood Pathfinder</h4>
        <p>Risk Forecasts</p>
      </div>
    </div>
    <p class="bonus-text">✨ Bonus: Unlock real NASA platform tutorials as you play!</p>
  </div>
</div>
```

### Location Setup Logic
```javascript
function setupLocationSelection() {
  const regionSelect = document.getElementById('region-select');
  const confirmBtn = document.getElementById('confirm-location');
  const customDiv = document.getElementById('custom-location');
  
  const locationData = {
    'iowa-usa': {
      name: 'Iowa, USA',
      coordinates: { lat: 42.0, lon: -93.5 },
      country: 'USA',
      climate: 'temperate',
      mainCrop: 'wheat/corn'
    },
    'punjab-india': {
      name: 'Punjab, India',
      coordinates: { lat: 30.9, lon: 75.8 },
      country: 'India',
      climate: 'monsoon-dependent',
      mainCrop: 'wheat/rice'
    },
    'saopaulo-brazil': {
      name: 'São Paulo, Brazil',
      coordinates: { lat: -23.5, lon: -46.6 },
      country: 'Brazil',
      climate: 'tropical',
      mainCrop: 'soy/sugarcane'
    },
    'kenya-africa': {
      name: 'Central Kenya',
      coordinates: { lat: -0.3, lon: 36.8 },
      country: 'Kenya',
      climate: 'semi-arid',
      mainCrop: 'maize/wheat'
    }
  };
  
  regionSelect.addEventListener('change', (e) => {
    const value = e.target.value;
    
    if (value === 'custom') {
      customDiv.classList.remove('hidden');
      confirmBtn.disabled = false;
    } else if (value) {
      customDiv.classList.add('hidden');
      gameState.location = locationData[value];
      confirmBtn.disabled = false;
    }
  });
  
  confirmBtn.addEventListener('click', () => {
    if (regionSelect.value === 'custom') {
      gameState.location = {
        name: document.getElementById('location-name').value,
        coordinates: {
          lat: parseFloat(document.getElementById('lat').value),
          lon: parseFloat(document.getElementById('lon').value)
        },
        country: 'Custom'
      };
    }
    
    // Generate location-specific NASA data
    generateLocationBasedData();
    
    // Show NASA tools tutorial
    showNASAToolsTutorial();
  });
}

function generateLocationBasedData() {
  // Adjust data based on location climate
  const climate = gameState.location.climate;
  
  if (climate === 'monsoon-dependent') {
    gameState.nasaData.smapAnomaly = -0.4; // More severe drought
    gameState.nasaData.floodRisk = 0.7; // Higher flood risk
  } else if (climate === 'semi-arid') {
    gameState.nasaData.smapAnomaly = -0.5; // Very dry
    gameState.nasaData.modisLST = 3.0; // Hotter
  }
  // etc.
}
```

---

## NASA Tools Interactive Tutorial

### Tutorial Screen (After Location Selection)
```html
<div id="nasa-tutorial">
  <h2>🎓 Quick NASA Tools Crash Course</h2>
  <p class="location-specific">For your farm in <strong id="farm-location"></strong></p>
  
  <div class="tutorial-steps">
    <!-- Step 1: Worldview -->
    <div class="tutorial-step active" data-step="1">
      <h3>📡 Step 1: See Your Farm from Space</h3>
      <p>NASA Worldview lets you view satellite imagery of your exact location</p>
      
      <div class="interactive-demo">
        <iframe 
          id="worldview-frame"
          src="https://worldview.earthdata.nasa.gov/"
          width="100%" 
          height="400px"
          sandbox="allow-same-origin allow-scripts"
        ></iframe>
        <div class="iframe-overlay">
          <button class="explore-btn" onclick="openWorldview()">
            🌍 Open Worldview for Your Location
          </button>
        </div>
      </div>
      
      <div class="learning-points">
        <h4>What you can see:</h4>
        <ul>
          <li>✅ Real-time satellite images of <strong id="location-1"></strong></li>
          <li>✅ Cloud cover, vegetation, water bodies</li>
          <li>✅ Updated daily (some layers hourly)</li>
        </ul>
      </div>
      
      <button class="next-step-btn">Next: Check Soil Moisture →</button>
    </div>
    
    <!-- Step 2: Crop-CASMA -->
    <div class="tutorial-step" data-step="2">
      <h3>💧 Step 2: Check Soil Moisture (SMAP)</h3>
      <p>Crop-CASMA shows SMAP soil moisture data in farmer-friendly format</p>
      
      <div class="interactive-demo">
        <iframe 
          id="casma-frame"
          src="https://nassgeo.csiss.gmu.edu/CropCASMA/"
          width="100%" 
          height="400px"
          sandbox="allow-same-origin allow-scripts"
        ></iframe>
        <div class="iframe-overlay">
          <button class="explore-btn" onclick="openCropCASMA()">
            💧 Open Crop-CASMA for <span id="location-2"></span>
          </button>
        </div>
      </div>
      
      <div class="learning-points">
        <h4>How to read it:</h4>
        <ul>
          <li>🔴 Red = Dry soil (need irrigation)</li>
          <li>🟡 Yellow = Moderate</li>
          <li>🟢 Green = Good moisture</li>
          <li>🔵 Blue = Saturated (possible flooding)</li>
        </ul>
        <p class="tip">💡 Tip: SMAP measures 0-5cm deep. For deeper roots, check trends over weeks.</p>
      </div>
      
      <button class="next-step-btn">Next: Monitor Temperature →</button>
    </div>
    
    <!-- Step 3: Giovanni -->
    <div class="tutorial-step" data-step="3">
      <h3>🌡️ Step 3: Track Temperature & Climate</h3>
      <p>Giovanni analyzes MODIS temperature data and trends</p>
      
      <div class="interactive-demo">
        <iframe 
          id="giovanni-frame"
          src="https://giovanni.gsfc.nasa.gov/giovanni/"
          width="100%" 
          height="400px"
          sandbox="allow-same-origin allow-scripts"
        ></iframe>
        <div class="iframe-overlay">
          <button class="explore-btn" onclick="openGiovanni()">
            🌡️ Open Giovanni for <span id="location-3"></span>
          </button>
        </div>
      </div>
      
      <div class="learning-points">
        <h4>What to monitor:</h4>
        <ul>
          <li>📈 Temperature anomalies (how much hotter than normal)</li>
          <li>🌾 Growing Degree Days (crop development pace)</li>
          <li>☀️ Heatwave predictions (stress on flowering crops)</li>
        </ul>
        <p class="tip">💡 Tip: MODIS LST measures surface temp (not air temp). Daytime readings can be 10-15°C higher.</p>
      </div>
      
      <button class="next-step-btn">Next: Check Flood Risk →</button>
    </div>
    
    <!-- Step 4: Flood Pathfinder -->
    <div class="tutorial-step" data-step="4">
      <h3>🌊 Step 4: Assess Flood Risk</h3>
      <p>NASA Flood Pathfinder provides precipitation forecasts and flood alerts</p>
      
      <div class="interactive-demo">
        <div class="resource-links">
          <a href="https://earthdata.nasa.gov/learn/pathfinders/disasters/floods-data-pathfinder" 
             target="_blank" 
             class="nasa-link"
             onclick="trackNASAToolUse('floodPathfinder')">
            🌊 Open Flood Data Pathfinder
          </a>
          <a href="https://www.drought.gov/" 
             target="_blank" 
             class="nasa-link">
            📊 U.S. Drought Monitor (uses NASA SMAP data)
          </a>
        </div>
      </div>
      
      <div class="learning-points">
        <h4>How to use it:</h4>
        <ul>
          <li>🔍 Search for your region: <strong id="location-4"></strong></li>
          <li>📅 Check 7-day precipitation forecast</li>
          <li>🚨 Set up alerts for extreme events</li>
          <li>🗺️ View historical flood patterns</li>
        </ul>
        <p class="tip">💡 Tip: Cross-reference with local terrain maps. Low-lying areas flood first.</p>
      </div>
      
      <button class="start-game-btn">🎮 Start Farming! →</button>
    </div>
  </div>
  
  <div class="tutorial-progress">
    <span class="step-dot active"></span>
    <span class="step-dot"></span>
    <span class="step-dot"></span>
    <span class="step-dot"></span>
  </div>
</div>
```

### Tutorial Navigation Logic
```javascript
function setupNASATutorial() {
  let currentStep = 1;
  const totalSteps = 4;
  
  // Populate location names
  document.querySelectorAll('[id^="location-"]').forEach(el => {
    el.textContent = gameState.location.name;
  });
  
  document.querySelectorAll('.next-step-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      if (currentStep < totalSteps) {
        currentStep++;
        showTutorialStep(currentStep);
      }
    });
  });
  
  document.querySelector('.start-game-btn').addEventListener('click', () => {
    closeTutorial();
    startStage1();
  });
}

function showTutorialStep(step) {
  document.querySelectorAll('.tutorial-step').forEach(s => {
    s.classList.remove('active');
  });
  document.querySelector(`[data-step="${step}"]`).classList.add('active');
  
  // Update progress dots
  document.querySelectorAll('.step-dot').forEach((dot, i) => {
    if (i < step) {
      dot.classList.add('active');
    } else {
      dot.classList.remove('active');
    }
  });
}

function openWorldview() {
  const lat = gameState.location.coordinates.lat;
  const lon = gameState.location.coordinates.lon;
  const url = `https://worldview.earthdata.nasa.gov/?v=${lon-2},${lat-2},${lon+2},${lat+2}&l=MODIS_Terra_CorrectedReflectance_TrueColor`;
  window.open(url, '_blank');
  gameState.nasaToolsUsed.worldview = true;
}

function openCropCASMA() {
  const lat = gameState.location.coordinates.lat;
  const lon = gameState.location.coordinates.lon;
  const url = `https://nassgeo.csiss.gmu.edu/CropCASMA/`;
  window.open(url, '_blank');
  showMessage('💡 Tip: Zoom to your location and select SMAP Soil Moisture layer', 'info');
  gameState.nasaToolsUsed.cropCASMA = true;
}

function openGiovanni() {
  const url = 'https://giovanni.gsfc.nasa.gov/giovanni/';
  window.open(url, '_blank');
  showMessage('💡 Tip: Select MODIS/Terra LST Day, enter your coordinates, and create a time series', 'info');
  gameState.nasaToolsUsed.giovanni = true;
}

function trackNASAToolUse(tool) {
  gameState.nasaToolsUsed[tool] = true;
}
```

---

## Stage 1: Sowing Decision (WITH NASA INTEGRATION)

### Scenario
- SMAP shows soil moisture anomaly: -0.3 (dry conditions)
- Player must choose irrigation strategy

### Options
**Option A: Sow without irrigation**
- Cost: 0
- Germination rate: 70%
- Risk: Possible poor germination shown immediately via visual feedback

**Option B: Irrigate before sowing**
- Cost: 2000 currency
- Irrigation volume: 400 m³ (40mm × 10 ha × 10 m³/mm/ha)
- Germination rate: 95%
- Water reserve: -20%

### Calculation Logic
```javascript
function processStage1Decision(choice) {
  if (choice === 'noIrrigate') {
    gameState.multipliers.germination = 0.70;
    // Calculate drought factor from SMAP
    gameState.multipliers.drought = Math.max(0.3, 1 + 0.8 * gameState.nasaData.smapAnomaly);
    
    // Show immediate visual consequence (thin, patchy wheat field)
    showMessage('Germination at 70% - some areas failed to sprout');
  } else {
    gameState.multipliers.germination = 0.95;
    gameState.budget -= 2000;
    gameState.waterReserve -= 20;
    gameState.multipliers.drought = 0.76; // Still affected by dry conditions
    
    // Show healthy dense wheat field
    showMessage('Strong germination achieved!');
  }
  
  // Immediately transition to Stage 2 after 2-second feedback
  setTimeout(() => advanceToStage2(), 2000);
}
```

### UI Elements
- **Location Banner:** Always visible showing "Your farm: [Location Name]"
- Satellite-style SMAP visualization (color gradient: red → yellow → green)
- **"Check Live Data" buttons** that open real NASA tools
- Decision cards showing cost/benefit breakdown
- Budget and water reserve meters
- "Consult NASA Resources" helper button
- "Confirm Decision" button

---

## Stage 2: Heatwave Crisis

### Scenario
- **Time Jump: "60 Days Later..."** (shown as transition text)
- Wheat is now flowering (critical stage) - 3D scene shows tall green plants
- MODIS LST shows temperature anomaly: +2.5°C
- NDVI currently healthy (0.75)

### Options
**Option A: Emergency cooling irrigation**
- Cost: 3000 currency
- Water reserve: -30%
- Heat factor improved from 0.875 to 0.96

**Option B: No action**
- Cost: 0
- Heat factor: 0.875 (12.5% yield loss)

### Calculation Logic
```javascript
function processStage2Decision(choice) {
  const lstAnomaly = gameState.nasaData.modisLST;
  
  if (choice === 'wait') {
    // Heat stress formula: HeatFactor = max(0.2, 1 - 0.05*(LST - 0.5))
    gameState.multipliers.heat = Math.max(0.2, 1 - 0.05 * (lstAnomaly - 0.5));
  } else {
    // Emergency irrigation improves heat factor
    gameState.multipliers.heat = Math.min(1.0, 
      Math.max(0.2, 1 - 0.05 * (lstAnomaly - 0.5)) + 0.10
    );
    gameState.budget -= 3000;
    gameState.waterReserve -= 30;
  }
}
```

### UI Elements
- MODIS LST heat map visualization
- Temperature anomaly graph
- NDVI trend indicator
- Impact preview: "Expected yield loss: X%"

---

## Stage 3: Harvest Gamble

### Scenario
- **Time Jump: "30 Days Later - Harvest Season"** (transition text)
- Wheat is golden and ready - 3D scene shows golden wheat
- Flood Data Pathfinder shows 60% flood probability
- Market price: Mature = 8/bushel, Immature = 6.5/bushel

### Options
**Option A: Harvest early**
- Maturity penalty: 0.85 multiplier
- Flood risk reduced to 10%
- Price: 6.5 per bushel

**Option B: Wait for full ripeness**
- No maturity penalty: 1.0 multiplier
- Flood risk: 60% probability of 54% loss
- Price: 8 per bushel (if successful)

### Calculation Logic
```javascript
function processStage3Decision(choice) {
  if (choice === 'harvestEarly') {
    gameState.multipliers.flood = 0.91; // Reduced flood impact
    gameState.pricePerBushel = 6.5;
    // Apply maturity penalty to potential yield
    gameState.potentialYield *= 0.85;
    
    // Show harvest animation
    showHarvestAnimation();
    showMessage('Crop secured! Slight quality reduction due to early harvest.');
    
    // Move to results after 2 seconds
    setTimeout(() => showFinalResults(), 2000);
  } else {
    // Show dramatic "rolling the dice" animation
    showDiceRollAnimation();
    
    // Roll dice for flood occurrence after 1.5 seconds
    setTimeout(() => {
      const floodOccurs = Math.random() < gameState.nasaData.floodRisk;
      if (floodOccurs) {
        gameState.multipliers.flood = 0.46; // 54% loss
        showFloodAnimation();
        showMessage('FLOOD OCCURRED! Massive crop loss.', 'danger');
      } else {
        gameState.multipliers.flood = 1.0;
        showClearSkiesAnimation();
        showMessage('No flood! Perfect harvest conditions!', 'success');
      }
      gameState.pricePerBushel = 8.0;
      
      // Move to results after dramatic reveal
      setTimeout(() => showFinalResults(), 3000);
    }, 1500);
  }
}
```

### UI Elements
- Flood risk map with probability zones
- Maturity progress bar (90%)
- Market price comparison
- Risk vs. reward calculator

---

## Final Calculations

### Yield Formula
```javascript
function calculateFinalYield() {
  const Yp = gameState.potentialYield;
  const A = gameState.farmSize;
  const G = gameState.multipliers.germination;
  const D = gameState.multipliers.drought;
  const H = gameState.multipliers.heat;
  const F = gameState.multipliers.flood;
  
  // Yield in kg
  gameState.finalYieldKg = Yp * A * G * D * H * F;
  
  // Convert to bushels (1 bushel = 27.2155 kg)
  gameState.finalYieldBushels = gameState.finalYieldKg / 27.2155;
}
```

### Profit Formula
```javascript
function calculateProfit() {
  const revenue = gameState.finalYieldBushels * gameState.pricePerBushel;
  
  const fixedCosts = 2000;
  const variableCosts = 1500;
  const harvestCosts = 600;
  const irrigationCosts = (10000 - gameState.budget) - fixedCosts - variableCosts - harvestCosts;
  
  const totalCosts = fixedCosts + variableCosts + harvestCosts + irrigationCosts;
  
  gameState.profit = revenue - totalCosts;
}
```

### Water Efficiency Formula
```javascript
function calculateWaterEfficiency() {
  const totalWaterUsed = ((100 - gameState.waterReserve) / 100) * 4000; // m³
  gameState.waterEfficiency = gameState.finalYieldKg / totalWaterUsed; // kg/m³
}
```

### Resilience Score
```javascript
function calculateResilience() {
  const yieldRatio = gameState.finalYieldKg / (gameState.potentialYield * gameState.farmSize);
  const profitRatio = Math.max(0, gameState.profit / 5000); // Expected profit baseline
  
  gameState.resilience = 100 * (0.6 * yieldRatio + 0.4 * Math.min(1, profitRatio));
}
```

---

## 3D Scene Specification

### Camera Setup
```javascript
// Isometric-style camera
camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(50, 60, 50);
camera.lookAt(0, 0, 0);
```

### Farm Terrain
```javascript
// 100x100 unit plane divided into 10x10 grid (10 hectares)
const geometry = new THREE.PlaneGeometry(100, 100, 10, 10);
const material = new THREE.MeshStandardMaterial({ 
  color: 0x8B4513, // Brown soil initially
  flatShading: true 
});
const terrain = new THREE.Mesh(geometry, material);
terrain.rotation.x = -Math.PI / 2;
scene.add(terrain);
```

### Wheat Plants (Dynamic)
```javascript
function createWheatField(stage) {
  const wheatGroup = new THREE.Group();
  
  for (let x = -45; x <= 45; x += 10) {
    for (let z = -45; z <= 45; z += 10) {
      const wheat = createWheatPlant(stage);
      wheat.position.set(x, 0, z);
      wheatGroup.add(wheat);
    }
  }
  
  return wheatGroup;
}

function createWheatPlant(stage) {
  let height, color;
  
  switch(stage) {
    case 1: // Seedling
      height = 2;
      color = 0x90EE90; // Light green
      break;
    case 2: // Flowering
      height = 8;
      color = 0x228B22; // Forest green
      break;
    case 3: // Mature
      height = 10;
      color = 0xDAA520; // Golden
      break;
  }
  
  const geometry = new THREE.CylinderGeometry(0.1, 0.1, height, 8);
  const material = new THREE.MeshStandardMaterial({ color: color });
  return new THREE.Mesh(geometry, material);
}
```

### Weather Effects
```javascript
// Rain particles (for irrigation/flood)
function createRainEffect() {
  const particles = new THREE.BufferGeometry();
  const positions = [];
  
  for (let i = 0; i < 500; i++) {
    positions.push(
      Math.random() * 100 - 50, // x
      Math.random() * 50 + 20,  // y
      Math.random() * 100 - 50  // z
    );
  }
  
  particles.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
  const material = new THREE.PointsMaterial({ color: 0x4488FF, size: 0.5 });
  return new THREE.Points(particles, material);
}
```

### Lighting
```javascript
// Ambient light
const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
scene.add(ambientLight);

// Directional light (sun)
const sunLight = new THREE.DirectionalLight(0xffffaa, 0.8);
sunLight.position.set(50, 100, 50);
scene.add(sunLight);
```

---

## UI Layout Specification

### HTML Structure
```html
<div id="game-container">
  <!-- 3D Canvas -->
  <canvas id="game-canvas"></canvas>
  
  <!-- Left Panel: NASA Data Dashboard -->
  <div id="data-panel" class="panel left">
    <h2>NASA Satellite Data</h2>
    <div id="smap-viz" class="data-viz"></div>
    <div id="modis-viz" class="data-viz"></div>
    <div id="flood-viz" class="data-viz"></div>
    <div id="stats">
      <p>Budget: <span id="budget">10000</span></p>
      <p>Water Reserve: <span id="water">100</span>%</p>
      <p id="stage-name">Stage 1: Early Season</p>
    </div>
  </div>
  
  <!-- Right Panel: Decision Interface -->
  <div id="decision-panel" class="panel right">
    <h2 id="stage-title">Stage 1: Sowing Decision</h2>
    <div id="scenario-text"></div>
    
    <div id="options">
      <div class="option-card" data-choice="A">
        <h3>Option A</h3>
        <p class="description"></p>
        <p class="cost">Cost: <span></span></p>
        <p class="impact">Impact: <span></span></p>
      </div>
      
      <div class="option-card" data-choice="B">
        <h3>Option B</h3>
        <p class="description"></p>
        <p class="cost">Cost: <span></span></p>
        <p class="impact">Impact: <span></span></p>
      </div>
    </div>
    
    <button id="confirm-btn" disabled>Select an Option</button>
  </div>
  
  <!-- Top HUD -->
  <div id="hud">
    <div class="stage-indicator">
      <span class="stage active">1</span>
      <span class="stage">2</span>
      <span class="stage">3</span>
    </div>
  </div>
  
  <!-- Final Results Modal -->
  <div id="results-modal" class="modal hidden">
    <div class="modal-content">
      <h2>Final Harvest Results</h2>
      <div id="results-content"></div>
      <button id="restart-btn">Play Again</button>
    </div>
  </div>
</div>
```

### CSS Styling Guidelines
```css
/* Use Earth tones and NASA data colors */
:root {
  --soil-dry: #D2691E;
  --soil-wet: #8B4513;
  --wheat-green: #228B22;
  --wheat-gold: #DAA520;
  --water-blue: #4488FF;
  --heat-red: #FF4444;
  --panel-bg: rgba(30, 30, 30, 0.9);
  --text-light: #FFFFFF;
}

/* Layout: Canvas centered, panels on sides */
#game-canvas {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
}

.panel {
  position: absolute;
  top: 80px;
  width: 350px;
  height: calc(100vh - 100px);
  background: var(--panel-bg);
  color: var(--text-light);
  padding: 20px;
  z-index: 10;
  overflow-y: auto;
}

.panel.left {
  left: 20px;
  border-radius: 10px 0 0 10px;
}

.panel.right {
  right: 20px;
  border-radius: 0 10px 10px 0;
}

/* Data visualization boxes */
.data-viz {
  width: 100%;
  height: 120px;
  margin: 15px 0;
  border: 2px solid #555;
  border-radius: 5px;
  background: linear-gradient(to right, #FF4444, #FFFF44, #44FF44);
  position: relative;
}

/* Option cards */
.option-card {
  background: rgba(255, 255, 255, 0.1);
  padding: 15px;
  margin: 10px 0;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s;
  border: 2px solid transparent;
}

.option-card:hover {
  background: rgba(255, 255, 255, 0.2);
  border-color: var(--water-blue);
}

.option-card.selected {
  border-color: var(--wheat-gold);
  background: rgba(218, 165, 32, 0.2);
}
```

---

## Educational Features

### Tooltip System
```javascript
const tooltips = {
  smap: "SMAP (Soil Moisture Active Passive) measures soil moisture 0-5cm deep using L-band microwave signals. Resolution: 9km. Best for regional drought monitoring.",
  modis: "MODIS Land Surface Temperature measures ground-level heat using thermal infrared. Updated twice daily. Critical for detecting crop stress during sensitive growth stages.",
  flood: "Flood Data Pathfinder combines satellite rainfall estimates with terrain models to predict flood probability. 7-day forecast window.",
  ndvi: "Normalized Difference Vegetation Index measures plant health using red/near-infrared light. Range 0-1. Healthy crops = 0.6-0.9."
};

// Show tooltip on hover
document.querySelectorAll('[data-tooltip]').forEach(el => {
  el.addEventListener('mouseenter', (e) => {
    const key = e.target.dataset.tooltip;
    showTooltip(tooltips[key], e.pageX, e.pageY);
  });
});
```

### Post-Decision Feedback
```javascript
function showDecisionFeedback(stage, choice, outcome) {
  const feedback = document.createElement('div');
  feedback.className = 'feedback-modal';
  feedback.innerHTML = `
    <h3>Decision Impact</h3>
    <p><strong>You chose:</strong> ${choice}</p>
    <p><strong>Effect:</strong> ${outcome.description}</p>
    <div class="calculation">
      <h4>Calculation Breakdown:</h4>
      <p>Germination Rate: ${(outcome.germination * 100).toFixed(0)}%</p>
      <p>Drought Factor: ${outcome.drought.toFixed(2)}</p>
      <p>Heat Factor: ${outcome.heat.toFixed(2)}</p>
      <p>Current Yield Estimate: ${outcome.yieldEstimate} kg</p>
    </div>
    <div class="education">
      <h4>Learn More:</h4>
      <p>${outcome.educationalNote}</p>
    </div>
    <button onclick="closeModal()">Continue</button>
  `;
  document.body.appendChild(feedback);
}
```

---

## Final Results Screen

### Display Format
```javascript
function showFinalResults() {
  const resultsHTML = `
    <div class="results-grid">
      <div class="result-card">
        <h3>🌾 Yield</h3>
        <p class="big-number">${gameState.finalYieldBushels.toFixed(0)}</p>
        <p class="subtitle">bushels (${(gameState.finalYieldKg).toFixed(0)} kg)</p>
        <p class="percentage">${((gameState.finalYieldKg / (gameState.potentialYield * gameState.farmSize)) * 100).toFixed(0)}% of potential</p>
      </div>
      
      <div class="result-card">
        <h3>💰 Profit</h3>
        <p class="big-number ${gameState.profit >= 0 ? 'positive' : 'negative'}">
          ${gameState.profit >= 0 ? '+' : ''}${gameState.profit.toFixed(0)}
        </p>
        <p class="subtitle">currency</p>
      </div>
      
      <div class="result-card">
        <h3>💧 Water Efficiency</h3>
        <p class="big-number">${gameState.waterEfficiency.toFixed(2)}</p>
        <p class="subtitle">kg/m³</p>
        <p class="rating">${getRating(gameState.waterEfficiency, 1, 5)}</p>
      </div>
      
      <div class="result-card">
        <h3>🛡️ Resilience</h3>
        <p class="big-number">${gameState.resilience.toFixed(0)}</p>
        <p class="subtitle">out of 100</p>
        <p class="rating">${getRating(gameState.resilience, 25, 75)}</p>
      </div>
    </div>
    
    <div class="decision-summary">
      <h3>Your Decisions:</h3>
      <ul>
        <li><strong>Stage 1:</strong> ${gameState.decisions.stage1 === 'irrigate' ? 'Pre-irrigation (Safe)' : 'Risk it (No irrigation)'}</li>
        <li><strong>Stage 2:</strong> ${gameState.decisions.stage2 === 'emergencyIrrigation' ? 'Emergency cooling (Costly)' : 'Wait (Accepted loss)'}</li>
        <li><strong>Stage 3:</strong> ${gameState.decisions.stage3 === 'harvestEarly' ? 'Early harvest (Secure)' : 'Wait for ripeness (Gamble)'}</li>
      </ul>
    </div>
    
    <div class="learning-summary">
      <h3>🎓 What You Learned:</h3>
      <ul>
        ${generateLearningPoints()}
      </ul>
    </div>
    
    <div class="nasa-links">
      <h3>Explore Real NASA Data:</h3>
      <a href="https://earthdata.nasa.gov" target="_blank">NASA Earthdata</a>
      <a href="https://giovanni.gsfc.nasa.gov" target="_blank">Giovanni</a>
      <a href="https://worldview.earthdata.nasa.gov" target="_blank">Worldview</a>
    </div>
  `;
  
  document.getElementById('results-content').innerHTML = resultsHTML;
  document.getElementById('results-modal').classList.remove('hidden');
}

function getRating(value, lowThreshold, highThreshold) {
  if (value < lowThreshold) return '❌ Poor';
  if (value < highThreshold) return '⚠️ Fair';
  if (value < highThreshold * 1.3) return '✅ Good';
  return '⭐ Excellent';
}

function generateLearningPoints() {
  const points = [];
  
  if (gameState.decisions.stage1 === 'irrigate') {
    points.push('✅ SMAP data helped you avoid planting failure');
  } else {
    points.push('⚠️ Ignoring SMAP warnings can lead to poor germination');
  }
  
  if (gameState.decisions.stage2 === 'emergencyIrrigation') {
    points.push('✅ MODIS LST alerts enabled proactive heat stress management');
  } else {
    points.push('📉 Heat stress reduced yield during flowering stage');
  }
  
  if (gameState.decisions.stage3 === 'harvestEarly') {
    points.push('✅ Flood forecasting helped you secure your crop');
  } else {
    if (gameState.multipliers.flood < 0.5) {
      points.push('❌ Ignoring flood warnings resulted in major losses');
    } else {
      points.push('🎲 Your gamble paid off - but data reduces risk!');
    }
  }
  
  return points.map(p => `<li>${p}</li>`).join('');
}
```

---

## Implementation Instructions for Replit AI Agent

### Step 1: Initial Setup
Create the file structure exactly as specified above. Start with index.html and include Three.js CDN.

### Step 2: Core Game Loop
Implement game.js with the gameState object and main game loop that updates the 3D scene and UI based on current stage.

### Step 3: Stage 1 Implementation
Build stage1.js with:
- SMAP data visualization (gradient color bar)
- Two option cards
- Decision processing logic
- Budget/water updates

### Step 4: 3D Scene Creation
Implement scene.js with:
- Basic Three.js setup (scene, camera, renderer)
- Farm terrain plane
- Wheat field generation (updateable based on stage)
- Lighting

### Step 5: Stage 2 Implementation
Build stage2.js with:
- MODIS LST heat map
- NDVI indicator
- Emergency irrigation decision
- Heat stress calculations

### Step 6: Stage 3 Implementation
Build stage3.js with:
- Flood risk visualization
- Market price comparison
- Harvest timing decision
- Random flood event

### Step 7: Final Calculations
Implement formulas.js with all yield, profit, water efficiency, and resilience calculations as specified.

### Step 8: Results Screen
Create the final results modal with:
- Four result cards (yield, profit, water efficiency, resilience)
- Decision summary
- Learning points
- NASA resource links

### Step 9: UI Polish
Implement ui.js for:
- Smooth transitions between stages
- Tooltip system
- Button interactions
- Modal animations

### Step 10: Responsive Design
Ensure the layout works on desktop (1920x1080) and tablet (768x1024) screens.

---

## Key Features to Emphasize

### 1. Fast-Paced Progression
**Time Flow:**
- Stage 1 → Decision → 2 second feedback → Auto-advance to Stage 2
- Stage 2 → Decision → 2 second feedback → Auto-advance to Stage 3  
- Stage 3 → Decision → Dramatic reveal (3 seconds) → Results screen
- **Total playtime: 3-5 minutes** (down from 12-15 minutes)

**Transition Effects:**
```javascript
function advanceToStage2() {
  // Fade out current stage
  fadeOut('#decision-panel', 500);
  
  // Show transition text
  showTransitionText('60 Days Later...', 1500);
  
  // Update 3D scene (wheat grows taller, greener)
  updateWheatField(2);
  
  // Update NASA data displays
  updateNASAData(2);
  
  // Fade in Stage 2 decision panel
  setTimeout(() => {
    loadStage2UI();
    fadeIn('#decision-panel', 500);
  }, 2000);
}

function showTransitionText(text, duration) {
  const overlay = document.createElement('div');
  overlay.className = 'transition-overlay';
  overlay.innerHTML = `<h1>${text}</h1>`;
  document.body.appendChild(overlay);
  
  setTimeout(() => {
    overlay.remove();
  }, duration);
}
```

### 2. Educational Tooltips
Every NASA dataset visualization should have hover tooltips explaining what the data means and its limitations.

### 3. Visual Feedback
The 3D scene should update immediately when decisions are made:
- Stage 1: Soil color changes from brown to dark when irrigated
- Stage 2: Heat distortion effect or plant wilting if no action taken
- Stage 3: Harvester appears or flood water rises

### 4. Real-Time Calculations
Show running totals in the UI:
- Budget counter animates when costs are deducted
- Water reserve bar depletes visually
- Yield estimate updates after each decision

### 5. Difficulty Balance
Ensure no single "correct" path - each decision has trade-offs:
- Early irrigation costs money but guarantees germination
- Emergency cooling saves yield but depletes resources
- Early harvest is safe but reduces profit

---

## Testing Checklist

- [ ] All three stages load sequentially
- [ ] NASA data visualizations render correctly
- [ ] Decision buttons work and update state
- [ ] 3D scene updates match game stage
- [ ] Calculations produce reasonable numbers (yield 500-800 bushels)
- [ ] Final results screen displays all metrics
- [ ] Restart button resets game completely
- [ ] Tooltips appear on hover
- [ ] Mobile/tablet layout is usable
- [ ] No console errors

---

## Expected Outcomes

**Note: All stages progress automatically after decisions - no waiting periods**

### Good Run (Smart Decisions):
- **Time to complete:** 3-4 minutes
- Yield: 750-800 bushels
- Profit: 2000-3000 currency
- Water Efficiency: 5-6 kg/m³
- Resilience: 65-80

### Average Run (Mixed Decisions):
- **Time to complete:** 3-5 minutes (longer if flood occurs)
- Yield: 500-650 bushels
- Profit: 0-1500 currency
- Water Efficiency: 3-5 kg/m³
- Resilience: 40-60

### Poor Run (Risky Decisions):
- **Time to complete:** 3-5 minutes
- Yield: 200-450 bushels
- Profit: -2000 to 500 currency
- Water Efficiency: 1-3 kg/m³
- Resilience: 15-35

---

## Build Priority Order

1. **Core structure** (HTML + basic CSS layout)
2. **Game state manager** (game.js with state object)
3. **Stage 1 complete** (UI + logic + 3D scene basics)
4. **3D scene enhancements** (wheat plants, lighting, camera)
5. **Stage 2 complete** (heat visualization + decision logic)
6. **Stage 3 complete** (flood visualization + decision logic)
7. **Final calculations** (all formulas working correctly)
8. **Results screen** (comprehensive summary with education)
9. **Polish** (tooltips, animations, mobile responsiveness)
10. **Testing** (all decision paths, edge cases)

---

## Success Criteria

The game is complete when:
- All three stages are playable end-to-end
- NASA data visualizations are clear and educational
- Calculations match the formulas provided
- 3D scene provides engaging visual feedback
- Final results screen teaches key concepts
- Game can be replayed with different outcomes
- Code is clean, commented, and maintainable

---

**Start building with Stage 1 first. Test it completely before moving to Stage 2. Build incrementally and ensure each piece works before adding complexity.**